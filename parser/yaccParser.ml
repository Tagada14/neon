type token =
  | TYPE
  | KIND
  | LAMBDA
  | PRODUCT
  | APP
  | TERMWITHYPEANNO
  | LET
  | LEMMA
  | EQUAL
  | IN
  | ARROW
  | VAR of (
# 2 "yaccParser.mly"
       string
# 17 "yaccParser.ml"
)
  | BR_OPN
  | BR_CLS
  | ASTERISK
  | COMMA
  | COLON
  | EOF

open Parsing
let _ = parse_error;;
# 12 "yaccParser.mly"

open Ast

let current_pos () =
  let start_p = symbol_start_pos () in
  let end_p   = symbol_end_pos () in
  { start  = start_p
  ; length = end_p.pos_cnum - start_p.pos_cnum
  }

let make data =
  { pos  = current_pos ()
  ; data = data
  }

# 44 "yaccParser.ml"
let yytransl_const = [|
  257 (* TYPE *);
  258 (* KIND *);
  259 (* LAMBDA *);
  260 (* PRODUCT *);
  261 (* APP *);
  262 (* TERMWITHYPEANNO *);
  263 (* LET *);
  264 (* LEMMA *);
  265 (* EQUAL *);
  266 (* IN *);
  267 (* ARROW *);
  269 (* BR_OPN *);
  270 (* BR_CLS *);
  271 (* ASTERISK *);
  272 (* COMMA *);
  273 (* COLON *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  268 (* VAR *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\000\000"

let yylen = "\002\000\
\002\000\001\000\001\000\001\000\006\000\004\000\006\000\003\000\
\006\000\006\000\003\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\002\000\003\000\000\000\000\000\000\000\000\000\
\004\000\000\000\013\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\
\000\000\011\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\011\000\020\000"

let yysindex = "\002\000\
\151\255\000\000\000\000\000\000\246\254\248\254\251\254\252\254\
\000\000\151\255\000\000\001\000\245\254\250\254\000\255\004\255\
\049\255\151\255\000\000\134\255\151\255\151\255\151\255\151\255\
\151\255\000\000\134\255\134\255\066\255\083\255\100\255\117\255\
\151\255\151\255\151\255\151\255\134\255\134\255\134\255\134\255"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\005\000\000\000\000\000\000\000\000\000\
\000\000\000\000\010\000\012\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\017\000\019\000\024\000\026\000"

let yygindex = "\000\000\
\000\000\013\000"

let yytablesize = 296
let yytable = "\021\000\
\019\000\013\000\001\000\014\000\012\000\022\000\015\000\016\000\
\024\000\008\000\023\000\006\000\025\000\012\000\000\000\000\000\
\005\000\000\000\007\000\000\000\000\000\000\000\017\000\009\000\
\000\000\010\000\000\000\000\000\000\000\000\000\027\000\000\000\
\000\000\028\000\029\000\030\000\031\000\032\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\037\000\038\000\039\000\
\040\000\003\000\004\000\005\000\006\000\000\000\000\000\007\000\
\008\000\000\000\000\000\000\000\009\000\010\000\026\000\000\000\
\000\000\018\000\003\000\004\000\005\000\006\000\000\000\000\000\
\007\000\008\000\000\000\000\000\033\000\009\000\010\000\000\000\
\000\000\000\000\018\000\003\000\004\000\005\000\006\000\000\000\
\000\000\007\000\008\000\000\000\000\000\034\000\009\000\010\000\
\000\000\000\000\000\000\018\000\003\000\004\000\005\000\006\000\
\000\000\000\000\007\000\008\000\000\000\035\000\000\000\009\000\
\010\000\000\000\000\000\000\000\018\000\003\000\004\000\005\000\
\006\000\000\000\000\000\007\000\008\000\000\000\036\000\000\000\
\009\000\010\000\000\000\000\000\000\000\018\000\003\000\004\000\
\005\000\006\000\000\000\000\000\007\000\008\000\000\000\000\000\
\000\000\009\000\010\000\000\000\000\000\000\000\018\000\003\000\
\004\000\005\000\006\000\000\000\000\000\007\000\008\000\000\000\
\000\000\000\000\009\000\010\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\003\000\004\000\005\000\006\000\000\000\000\000\007\000\
\008\000\000\000\000\000\000\000\009\000\010\000\012\000\012\000\
\000\000\018\000\012\000\008\000\008\000\006\000\006\000\008\000\
\000\000\006\000\005\000\005\000\007\000\007\000\005\000\000\000\
\007\000\009\000\009\000\010\000\010\000\009\000\000\000\010\000"

let yycheck = "\011\001\
\000\000\012\001\001\000\012\001\000\000\017\001\012\001\012\001\
\009\001\000\000\017\001\000\000\009\001\001\000\255\255\255\255\
\000\000\255\255\000\000\255\255\255\255\255\255\010\000\000\000\
\255\255\000\000\255\255\255\255\255\255\255\255\018\000\255\255\
\255\255\021\000\022\000\023\000\024\000\025\000\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\033\000\034\000\035\000\
\036\000\001\001\002\001\003\001\004\001\255\255\255\255\007\001\
\008\001\255\255\255\255\255\255\012\001\013\001\014\001\255\255\
\255\255\017\001\001\001\002\001\003\001\004\001\255\255\255\255\
\007\001\008\001\255\255\255\255\011\001\012\001\013\001\255\255\
\255\255\255\255\017\001\001\001\002\001\003\001\004\001\255\255\
\255\255\007\001\008\001\255\255\255\255\011\001\012\001\013\001\
\255\255\255\255\255\255\017\001\001\001\002\001\003\001\004\001\
\255\255\255\255\007\001\008\001\255\255\010\001\255\255\012\001\
\013\001\255\255\255\255\255\255\017\001\001\001\002\001\003\001\
\004\001\255\255\255\255\007\001\008\001\255\255\010\001\255\255\
\012\001\013\001\255\255\255\255\255\255\017\001\001\001\002\001\
\003\001\004\001\255\255\255\255\007\001\008\001\255\255\255\255\
\255\255\012\001\013\001\255\255\255\255\255\255\017\001\001\001\
\002\001\003\001\004\001\255\255\255\255\007\001\008\001\255\255\
\255\255\255\255\012\001\013\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\003\001\004\001\255\255\255\255\007\001\
\008\001\255\255\255\255\255\255\012\001\013\001\010\001\011\001\
\255\255\017\001\014\001\010\001\011\001\010\001\011\001\014\001\
\255\255\014\001\010\001\011\001\010\001\011\001\014\001\255\255\
\014\001\010\001\011\001\010\001\011\001\014\001\255\255\014\001"

let yynames_const = "\
  TYPE\000\
  KIND\000\
  LAMBDA\000\
  PRODUCT\000\
  APP\000\
  TERMWITHYPEANNO\000\
  LET\000\
  LEMMA\000\
  EQUAL\000\
  IN\000\
  ARROW\000\
  BR_OPN\000\
  BR_CLS\000\
  ASTERISK\000\
  COMMA\000\
  COLON\000\
  EOF\000\
  "

let yynames_block = "\
  VAR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 34 "yaccParser.mly"
                 ( [_1] )
# 214 "yaccParser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 38 "yaccParser.mly"
       ( make (Type) )
# 220 "yaccParser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 39 "yaccParser.mly"
       ( make (Kind) )
# 226 "yaccParser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 40 "yaccParser.mly"
       ( make (Var _1) )
# 233 "yaccParser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 41 "yaccParser.mly"
                                               (make  (Lambda (_2, (Some _4), _6)) )
# 242 "yaccParser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 42 "yaccParser.mly"
                              (make (Lambda (_2, None, _4)) )
# 250 "yaccParser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 43 "yaccParser.mly"
                                                (make (Product (_2, _4, _6)) )
# 259 "yaccParser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 44 "yaccParser.mly"
                              (make (TermWithTypeAnno (_1, _3)) )
# 267 "yaccParser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 45 "yaccParser.mly"
                                         (make (Let (_2, _4, _6)) )
# 276 "yaccParser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 46 "yaccParser.mly"
                                           ( make (Lemma (_2, _4, _6)) )
# 285 "yaccParser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 47 "yaccParser.mly"
                           ( _2 )
# 292 "yaccParser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 48 "yaccParser.mly"
                        ( make (App (_1, _2)) )
# 300 "yaccParser.ml"
               : 'expression))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
;;
