# 1 "lexer.mll"
 

let raise_error (lexbuf : Lexing.lexbuf) reason =
  let pos =
    { Ast.start  = lexbuf.lex_start_p
    ; Ast.length = lexbuf.lex_curr_p.pos_cnum - lexbuf.lex_start_p.pos_cnum
    }
  in raise (Errors.Parse_error(pos, reason))


# 13 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\238\255\239\255\052\000\000\000\001\000\026\000\004\000\
    \023\000\000\000\000\000\249\255\250\255\251\255\252\255\000\000\
    \254\255\005\000\253\255\248\255\247\255\001\000\002\000\246\255\
    \001\000\000\000\245\255\004\000\244\255\243\255\066\000\006\000\
    \242\255\000\000\241\255\009\000\010\000\253\255\001\000\255\255\
    \254\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\015\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\255\255\255\255\255\255\255\255\017\000\
    \255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\003\000\255\255\004\000\255\255\
    \255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\000\000\000\000\000\000\255\255\
    \000\000\255\255\000\000\000\000\000\000\255\255\255\255\000\000\
    \255\255\255\255\000\000\255\255\000\000\000\000\255\255\255\255\
    \000\000\255\255\000\000\036\000\036\000\000\000\255\255\000\000\
    \000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\017\000\016\000\017\000\017\000\017\000\017\000\000\000\
    \017\000\017\000\017\000\039\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \017\000\000\000\000\000\000\000\000\000\017\000\000\000\000\000\
    \014\000\013\000\018\000\000\000\000\000\009\000\000\000\015\000\
    \040\000\000\000\000\000\038\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\012\000\000\000\000\000\011\000\020\000\000\000\
    \000\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\000\000\000\000\000\000\000\000\003\000\
    \000\000\034\000\000\000\000\000\026\000\030\000\006\000\023\000\
    \000\000\010\000\029\000\007\000\004\000\024\000\019\000\025\000\
    \005\000\022\000\028\000\033\000\008\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\027\000\
    \021\000\000\000\000\000\003\000\000\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\031\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\032\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\037\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\017\000\255\255\
    \017\000\017\000\017\000\035\000\036\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\017\000\255\255\255\255\
    \000\000\000\000\015\000\255\255\255\255\000\000\255\255\000\000\
    \038\000\255\255\255\255\035\000\036\000\255\255\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\000\000\009\000\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\255\255\255\255\255\255\000\000\
    \255\255\033\000\255\255\255\255\025\000\004\000\000\000\022\000\
    \255\255\000\000\005\000\000\000\000\000\007\000\010\000\024\000\
    \000\000\021\000\027\000\031\000\000\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\006\000\
    \008\000\255\255\255\255\003\000\255\255\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\030\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\030\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\035\000\036\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 18 "lexer.mll"
                ( token lexbuf )
# 141 "lexer.ml"

  | 1 ->
# 19 "lexer.mll"
         ( Lexing.new_line lexbuf; token lexbuf )
# 146 "lexer.ml"

  | 2 ->
# 20 "lexer.mll"
         ( block_comment lexbuf;   token lexbuf )
# 151 "lexer.ml"

  | 3 ->
# 21 "lexer.mll"
         ( YaccParser.BR_OPN    )
# 156 "lexer.ml"

  | 4 ->
# 22 "lexer.mll"
         ( YaccParser.BR_CLS    )
# 161 "lexer.ml"

  | 5 ->
# 23 "lexer.mll"
         ( YaccParser.COLON     )
# 166 "lexer.ml"

  | 6 ->
# 24 "lexer.mll"
         ( YaccParser.EQUAL     )
# 171 "lexer.ml"

  | 7 ->
# 25 "lexer.mll"
          ( YaccParser.IN     )
# 176 "lexer.ml"

  | 8 ->
# 26 "lexer.mll"
         ( YaccParser.ARROW     )
# 181 "lexer.ml"

  | 9 ->
# 27 "lexer.mll"
           ( YaccParser.TYPE )
# 186 "lexer.ml"

  | 10 ->
# 28 "lexer.mll"
           ( YaccParser.KIND )
# 191 "lexer.ml"

  | 11 ->
# 29 "lexer.mll"
          ( YaccParser.LAMBDA )
# 196 "lexer.ml"

  | 12 ->
# 30 "lexer.mll"
         ( YaccParser.PRODUCT )
# 201 "lexer.ml"

  | 13 ->
# 31 "lexer.mll"
          ( YaccParser.LET )
# 206 "lexer.ml"

  | 14 ->
# 32 "lexer.mll"
            ( YaccParser.LEMMA )
# 211 "lexer.ml"

  | 15 ->
let
# 33 "lexer.mll"
                           x
# 217 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 33 "lexer.mll"
                             ( YaccParser.VAR x )
# 221 "lexer.ml"

  | 16 ->
# 34 "lexer.mll"
           ( YaccParser.EOF )
# 226 "lexer.ml"

  | 17 ->
let
# 35 "lexer.mll"
         x
# 232 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 35 "lexer.mll"
           (
      raise_error lexbuf (InvalidChar x)
    )
# 238 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and block_comment lexbuf =
   __ocaml_lex_block_comment_rec lexbuf 35
and __ocaml_lex_block_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 40 "lexer.mll"
         ( Lexing.new_line lexbuf; block_comment lexbuf )
# 250 "lexer.ml"

  | 1 ->
# 41 "lexer.mll"
         ( () )
# 255 "lexer.ml"

  | 2 ->
# 42 "lexer.mll"
         (
      raise_error lexbuf EofInComment
    )
# 262 "lexer.ml"

  | 3 ->
# 45 "lexer.mll"
                 ( block_comment lexbuf )
# 267 "lexer.ml"

  | 4 ->
# 46 "lexer.mll"
                 ( block_comment lexbuf )
# 272 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_block_comment_rec lexbuf __ocaml_lex_state

;;

